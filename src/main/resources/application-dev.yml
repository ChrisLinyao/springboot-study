#1.配置文件的作用 ：修改SpringBoot自动配置的默认值，因为SpringBoot在底层都给我们自动配置好了。
#YAML 的意思其实是："Yet Another Markup Language"（仍是一种标记语言）
#这种语言以数据作为中心，而不是以标记语言为重点！
#SpringBoot使用一个全局的配置文件 ， 配置文件名称是固定的


#2.yaml基础语法
#说明：语法要求严格！
#
#1、空格不能省略
#
#2、以缩进来控制层级关系，只要是左边对齐的一列数据都是同一个层级的。
#
#3、属性和值的大小写都是十分敏感的。

#
#application.properties
 # properties配置文件在写中文的时候，会有乱码 ， 我们需要去IDEA中设置编码格式为UTF-8；
#
#语法结构 ：key=value
#
#application.yml
#
#语法结构 ：key：空格 value

#字面量直接写在后面就可以 ， 字符串默认不用加上双引号或者单引号；

#  注意：
#
#  “ ” 双引号，不会转义字符串里面的特殊字符 ， 特殊字符会作为本身想表示的意思；
#
name1: "kuang \n shen"   #输出 ：kuang  换行   shen
#
#  '' 单引号，会转义特殊字符 ， 特殊字符最终会变成和普通字符一样输出
name2: ‘kuang \n shen’   #输出 ：kuang  \n   shen


#对象、Map格式
k:
  v1:
  v2:
student:
  name: qinjiang
  age: 3
#行内写法
student2: {name: qinjiang,age: 3}
# 数组（ List、set ）, 用 - 值表示数组中的一个元素
pets:
  - cat
  - dog
  - pig

#行内写法
pets2: [cat,dog,pig]

#yaml文件更强大的地方在于，他可以给我们的实体类直接注入匹配值！
#  我们来使用yaml配置的方式进行注入

person:
  name: lin
  age: 3
  happy: false
  birth: 2000/01/01
  maps: {k1: v1,k2: v2}
  lists:
    - code
    - girl
    - music
  dog:
    name: 旺财
    age: 1

#配置文件还可以编写占位符生成随机数
  person2:
    name: qinjiang${random.uuid} # 随机uuid
    age: ${random.int}  # 随机int
    happy: false
    birth: 2000/01/01
    maps: { k1: v1,k2: v2 }
    lists:
      - code
      - girl
      - music
    dog:
      name: ${person.hello:other}_旺财
      age: 1
 #springboot那么多的自动配置类，必须在一定的条件下才能生效；并非加载即生效；可以通过debug=true属性来让控制台打印自动生效配置的报告。
debug: true
