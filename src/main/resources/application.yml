#profile是Spring对不同环境提供不同配置功能的支持，可以通过激活不同的环境版本，实现快速切换环境；
#
#多配置文件
#我们在主配置文件编写的时候，文件名可以是 application-{profile}.properties/yml , 用来指定多个环境版本；
#比如在配置文件中指定使用dev环境，我们可以通过设置不同的端口号进行测试；
#我们启动SpringBoot，就可以看到已经切换到dev下的配置了；
#spring.profiles.active=dev
#和properties配置文件中一样，但是使用yml去实现不需要创建多个配置文件，更加方便了 !


#  注意：如果yml和properties同时都配置了端口，并且没有激活其他环境 ， 默认会使用properties配置文件的！
server:
  port: 8081
#选择要激活那个环境块
spring:
  profiles:
    active: dev

---
server:
  port: 8083
spring:
  config:
    activate:
      on-profile: test
---

server:
  port: 8084
spring:
  config:
    activate:
      on-profile: prod
#  springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件：
#  优先级1：项目路径下的config文件夹配置文件  file:./config/
#  优先级2：项目路径下配置文件  file:./
#  优先级3：资源路径下的config文件夹配置文件 classpath:/config/
#  优先级4：资源路径下配置文件   classpath:/
#优先级由高到底，高优先级的配置会覆盖低优先级的配置；
#SpringBoot会从这四个位置全部加载主配置文件；互补配置；


#  指定位置加载配置文件
#
#  我们还可以通过spring.config.location来改变默认的配置文件位置
#
#  项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；这种情况，一般是后期运维做的多，相同配置，外部指定的配置文件优先级最高

# java -jar spring-boot-config.jar --spring.config.location=F:/application.properties